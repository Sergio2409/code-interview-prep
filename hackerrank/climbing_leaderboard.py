#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -----------------------------------------------
# Copyright (c) ░s░e░r░g░i░o░v░a░l░d░e░s░2░4░0░9░
# Mail: sergiovaldes2409@gmail.com
#
# All rights reserved.
#
#
"""
Module description goes here

"""


def get_new_rank(rank_vales, current_rank, score):
    while current_rank > 0:
        if current_rank == len(rank_vales):
            current_rank -= 1
        tmp_score = rank_vales[current_rank]
        if score < tmp_score:
            return current_rank + 1
        elif score == tmp_score:
            return current_rank
        else:
            current_rank -= 1
    if current_rank == 0:
        tmp_score = rank_vales[current_rank]
        return 0 if score >= tmp_score else 1
    return current_rank


def climbingLeaderboard(ranked_att, player):
    # Write your code here
    result = []
    rank_info = {}
    ranked = []
    player.reverse()
    for el in ranked_att:
        if not rank_info.get(el, False):
            rank_info[el] = 1
            ranked.append(el)
    curr_rank = len(ranked)
    while curr_rank >= 0:
        curr_score = player.pop()
        curr_rank = get_new_rank(ranked, curr_rank, curr_score)
        result.append(curr_rank + 1)
        if len(player) == 0:
            break
    return result


def data_gen1():
    r = '998 995 995 991 989 989 984 979 968 964 955 955 947 945 942 934 933 930 928 927 918 916 905 900 898 895 895 895 892 887 882 881 878 876 872 872 858 856 846 844 839 823 808 806 804 800 799 794 793 789 784 772 766 765 764 762 762 759 757 751 747 745 738 725 720 708 706 703 699 697 693 691 690 685 682 677 662 661 656 648 642 641 640 634 632 625 623 618 618 617 601 601 600 591 585 583 578 552 550 550 546 543 539 509 505 503 503 494 486 474 472 472 472 468 467 464 439 438 434 434 427 421 420 405 399 395 392 388 386 384 377 374 368 356 350 344 342 341 337 331 298 296 296 294 290 260 259 248 245 244 244 233 228 215 211 210 206 202 201 189 186 181 178 168 163 162 161 159 151 147 143 142 142 141 139 132 130 128 125 125 120 112 111 95 92 91 88 81 69 66 63 48 44 20 18 17 14 8 1 1'
    p = '18 31 38 126 152 170 198 199 202 243 369 376 376 408 560 572 614 665 666 942'
    res = '177 176 176 162 153 148 144 144 142 136 119 118 118 110 89 89 83 70 70 12'
    lmbd = lambda s: [int(el) for el in s.split()]
    return lmbd(r), lmbd(p), lmbd(res)

def data_gen2():
    r = '295 294 291 287 287 285 285 284 283 279 277 274 274 271 270 268 268 268 264 260 259 258 257 255 252 250 244 241 240 237 236 236 231 227 227 227 226 225 224 223 216 212 200 197 196 194 193 189 188 187 183 182 178 177 173 171 169 165 143 140 137 135 133 130 130 130 128 127 122 120 116 114 113 109 106 103 99 92 85 81 69 68 63 63 63 61 57 51 47 46 38 30 28 25 22 15 14 12 6 4'
    p = '5 5 6 14 19 20 23 25 29 29 30 30 32 37 38 38 38 41 41 44 45 45 47 59 59 62 63 65 67 69 70 72 72 76 79 82 83 90 91 92 93 98 98 100 100 102 103 105 106 107 109 112 115 118 118 121 122 122 123 125 125 125 127 128 131 131 133 134 139 140 141 143 144 144 144 144 147 150 152 155 156 160 164 164 165 165 166 168 169 170 171 172 173 174 174 180 184 187 187 188 194 197 197 197 198 201 202 202 207 208 211 212 212 214 217 219 219 220 220 223 225 227 228 229 229 233 235 235 236 242 242 245 246 252 253 253 257 257 260 261 266 266 268 269 271 271 275 276 281 282 283 284 285 287 289 289 295 296 298 300 300 301 304 306 308 309 310 316 318 318 324 326 329 329 329 330 330 332 337 337 341 341 349 351 351 354 356 357 366 369 377 379 380 382 391 391 394 396 396 400'
    res = '88 88 87 85 84 84 83 82 81 81 80 80 80 80 79 79 79 79 79 79 79 79 77 75 75 74 73 73 73 71 71 71 71 71 71 70 70 69 69 68 68 68 68 67 67 67 66 66 65 65 64 64 62 61 61 60 59 59 59 59 59 59 58 57 56 56 55 55 53 52 52 51 51 51 51 51 51 51 51 51 51 51 51 51 50 50 50 50 49 49 48 48 47 47 47 45 43 42 42 41 38 36 36 36 36 35 35 35 35 35 35 34 34 34 33 33 33 33 33 32 30 28 28 28 28 27 27 27 26 23 23 22 22 20 20 20 18 18 15 15 14 14 13 13 11 11 10 10 8 8 7 6 5 4 4 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1'
    lmbd = lambda s: [int(el) for el in s.split()]
    return lmbd(r), lmbd(p), lmbd(res)

def data_gen3():
    r = [100, 100, 50, 40, 40, 20, 10]
    p = [5, 6, 7, 8, 25, 50, 120]
    res = [6, 6, 6, 6, 4, 2, 1]
    return r, p, res

def data_gen4():
    r = '997 981 957 933 930 927 926 920 916 896 887 874 863 863 858 847 815 809 803 794 789 785 783 778 764 755 751 740 737 730 691 677 652 650 587 585 583 568 546 541 540 538 531 527 506 493 457 435 430 427 422 422 414 404 400 394 387 384 374 371 369 369 368 365 363 337 336 328 325 316 314 306 282 277 230 227 212 199 179 173 171 168 136 125 124 95 92 88 85 70 68 61 60 59 44 43 28 23 13 12'
    p = '12 20 30 32 35 37 63 72 83 85 96 98 98 118 122 125 129 132 140 144 150 164 184 191 194 198 200 220 228 229 229 236 238 246 259 271 276 281 283 287 300 302 306 307 312 318 321 325 341 341 341 344 349 351 354 356 366 369 370 379 380 380 396 405 408 417 423 429 433 435 438 441 442 444 445 445 452 453 465 466 467 468 469 471 475 482 489 491 492 493 498 500 501 504 506 508 523 529 530 539 543 551 552 556 568 569 571 587 591 601 602 606 607 612 614 619 620 623 625 625 627 638 645 653 661 662 669 670 676 684 689 690 709 709 710 716 724 726 730 731 733 737 744 744 747 757 764 765 765 772 773 774 777 787 794 796 797 802 805 811 814 819 819 829 830 841 842 847 857 857 859 860 866 872 879 882 895 900 900 903 905 915 918 918 922 925 927 928 929 931 934 937 955 960 966 974 982 988 996 996'
    res = '97 96 94 94 94 94 89 87 87 86 83 83 83 83 83 81 81 81 80 80 80 80 76 76 76 76 75 74 73 73 73 72 72 72 72 72 72 71 70 70 70 70 69 69 69 67 67 66 63 63 63 63 63 63 63 63 61 59 59 57 57 57 54 52 52 51 50 49 48 47 47 47 47 47 47 47 47 47 46 46 46 46 46 46 46 46 46 46 46 45 45 45 45 45 44 44 44 43 43 41 39 38 38 38 37 37 37 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 32 32 32 32 32 32 31 31 31 30 30 30 30 30 30 29 29 29 28 27 27 27 25 24 24 24 24 24 24 24 21 19 19 19 19 18 17 17 16 16 16 16 16 16 15 15 15 14 14 13 13 12 12 11 10 10 10 10 10 9 9 8 8 6 6 6 5 4 4 4 3 3 3 2 2 2 2'
    lmbd = lambda s: [int(el) for el in s.split()]
    return lmbd(r), lmbd(p), lmbd(res)


if __name__ == '__main__':
    r = [100,100, 50,40,40,20,10]
    p = [5,25,50,120]
    res1 = [6,4,2,1]

    print(climbingLeaderboard(r, p) == res1)
    data1 = data_gen1()
    print(climbingLeaderboard(data1[0], data1[1]) == data1[2])
    data2 = data_gen2()
    print(climbingLeaderboard(data2[0], data2[1]) == data2[2])
    data3 = data_gen3()
    print(climbingLeaderboard(data3[0], data3[1]) == data3[2])
    data4 = data_gen4()
    print(climbingLeaderboard(data4[0], data4[1]) == data4[2])

